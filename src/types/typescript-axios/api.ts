/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface TestTable
 */
export interface TestTable {
  /**
   *
   * @type {number}
   * @memberof TestTable
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof TestTable
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof TestTable
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof TestTable
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface TestTableRequest
 */
export interface TestTableRequest {
  /**
   *
   * @type {string}
   * @memberof TestTableRequest
   */
  name: string;
}

/**
 * TestTableRestControllerApi - axios parameter creator
 * @export
 */
export const TestTableRestControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {TestTableRequest} testTableRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add: async (
      testTableRequest: TestTableRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'testTableRequest' is not null or undefined
      assertParamExists("add", "testTableRequest", testTableRequest);
      const localVarPath = `/api/testTables`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        testTableRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTestTable: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTestTable", "id", id);
      const localVarPath = `/api/testTables/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTestTables: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/testTables`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TestTableRestControllerApi - functional programming interface
 * @export
 */
export const TestTableRestControllerApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    TestTableRestControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {TestTableRequest} testTableRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async add(
      testTableRequest: TestTableRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestTable>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.add(
        testTableRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TestTableRestControllerApi.add"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTestTable(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestTable>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTestTable(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TestTableRestControllerApi.getTestTable"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTestTables(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TestTable>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTestTables(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TestTableRestControllerApi.getTestTables"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TestTableRestControllerApi - factory interface
 * @export
 */
export const TestTableRestControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TestTableRestControllerApiFp(configuration);
  return {
    /**
     *
     * @param {TestTableRequest} testTableRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    add(
      testTableRequest: TestTableRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TestTable> {
      return localVarFp
        .add(testTableRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTestTable(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TestTable> {
      return localVarFp
        .getTestTable(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTestTables(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<TestTable>> {
      return localVarFp
        .getTestTables(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TestTableRestControllerApi - object-oriented interface
 * @export
 * @class TestTableRestControllerApi
 * @extends {BaseAPI}
 */
export class TestTableRestControllerApi extends BaseAPI {
  /**
   *
   * @param {TestTableRequest} testTableRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TestTableRestControllerApi
   */
  public add(
    testTableRequest: TestTableRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TestTableRestControllerApiFp(this.configuration)
      .add(testTableRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TestTableRestControllerApi
   */
  public getTestTable(id: number, options?: RawAxiosRequestConfig) {
    return TestTableRestControllerApiFp(this.configuration)
      .getTestTable(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TestTableRestControllerApi
   */
  public getTestTables(options?: RawAxiosRequestConfig) {
    return TestTableRestControllerApiFp(this.configuration)
      .getTestTables(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
